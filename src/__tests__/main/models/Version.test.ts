import { Increment } from '../../../main/models/Increment';
import { Model } from '../../../main/models/Model';
import { Version } from '../../../main/models/Version';

describe('Version', () => {
  let version: Version;

  beforeEach(() => {
    version = new Version();
  });

  it('should have an id generated by uuid', () => {
    expect(version.id).toBeDefined();
    expect(version.id).toMatch(
      /^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i
    );
  });

  it('should have all other fields undefined', () => {
    expect(version.createdAt).toBeUndefined();
    expect(version.payload).toBeUndefined();
    expect(version.model).toBeUndefined();
    expect(version.modelId).toBeUndefined();
    expect(version.versionIndex).toBeUndefined();
    expect(version.thumbnail).toBeUndefined();
    expect(version.x).toBeUndefined();
    expect(version.y).toBeUndefined();
    expect(version.height).toBeUndefined();
    expect(version.width).toBeUndefined();
  });

  it('should allow setting and getting values', () => {
    const model = new Model();

    const createdAt = new Date();
    const payload = 'Test payload';
    const versionIndex = 0;
    const thumbnail = 'Test thumbnail';
    const x = 0.0;
    const y = 0.0;
    const height =  0.0;
    const width = 0.0;

    version.createdAt = createdAt;
    version.payload = payload;
    version.model = model;
    version.modelId = model.id;
    version.versionIndex = versionIndex;
    version.thumbnail = thumbnail;
    version.x = x;
    version.y = y;
    version.height = height;
    version.width = width;

    expect(version.createdAt).toBe(createdAt);
    expect(version.payload).toBe(payload);
    expect(version.model).toBe(model);
    expect(version.modelId).toBe(model.id);
    expect(version.versionIndex).toBe(versionIndex);
    expect(version.thumbnail).toBe(thumbnail);
    expect(version.x).toBe(x);
    expect(version.y).toBe(y);
    expect(version.height).toBe(height);
    expect(version.width).toBe(width);
  });

  it('should convert dates to ISO strings in toJSON method', () => {
    const date = new Date();
    version.createdAt = date;

    const json = version.toJSON();

    expect(json.createdAt).toBe(date.toISOString());
  });

  it('should add model correctly', () => {
    const model = new Model();

    model.createdAt = new Date();
    model.name = 'Test model';
    model.versions = [];
    model.increment = new Increment;
    model.incrementId = model.increment.id;

    version.model = model;
    version.modelId = model.id;

    expect(version.model).toBe(model);
    expect(version.modelId).toBe(model.id);
  });
});
