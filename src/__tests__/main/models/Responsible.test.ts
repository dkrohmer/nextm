import { Model } from '../../../main/models/Model';
import { Product } from '../../../main/models/Product';
import { Responsible } from '../../../main/models/Responsible';

describe('Responsible', () => {
  let responsible: Responsible;

  beforeEach(() => {
    responsible = new Responsible();
  });

  it('should have an id generated by uuid', () => {
    expect(responsible.id).toBeDefined();
    expect(responsible.id).toMatch(
      /^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,
    );
  });

  it('should have all other fields undefined', () => {
    expect(responsible.firstName).toBeUndefined();
    expect(responsible.lastName).toBeUndefined();
    expect(responsible.role).toBeUndefined();
    expect(responsible.product).toBeUndefined();
    expect(responsible.productId).toBeUndefined();
  });

  it('should allow setting and getting values', () => {
    const model = new Model();

    const firstName = 'Test firstname';
    const lastName = 'Test lastname';
    const role = 'Test role';
    const product = new Product();
    const productId = product.id;

    responsible.firstName = firstName;
    responsible.lastName = lastName;
    responsible.role = role;
    responsible.product = product;
    responsible.productId = productId;

    expect(responsible.firstName).toBe(firstName);
    expect(responsible.lastName).toBe(lastName);
    expect(responsible.role).toBe(role);
    expect(responsible.product).toBe(product);
    expect(responsible.productId).toBe(productId);
  });

  it('should add product correctly', () => {
    const product = new Product();

    responsible.product = product;
    responsible.productId = product.id;

    expect(responsible.product).toBe(product);
    expect(responsible.productId).toBe(product.id);
  });
});
