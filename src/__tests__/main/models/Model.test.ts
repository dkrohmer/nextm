import { Product } from '../../../main/models/Product';
import { Increment } from '../../../main/models/Increment';
import { Model } from '../../../main/models/Model';
import { Version } from '../../../main/models/Version';

describe('Model', () => {
  let model: Model;

  beforeEach(() => {
    model = new Model();
  });

  it('should have an id generated by uuid', () => {
    expect(model.id).toBeDefined();
    expect(model.id).toMatch(
      /^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i
    );
  });

  it('should have all other fields undefined', () => {
    expect(model.createdAt).toBeUndefined();
    expect(model.name).toBeUndefined();
    expect(model.versions).toBeUndefined();
    expect(model.increment).toBeUndefined();
    expect(model.incrementId).toBeUndefined();
  });

  it('should allow setting and getting values', () => {
    const createdAt = new Date();
    const name = 'Test Model';

    const version = new Version();
    const versions = [version];

    const increment = new Increment();

    model.createdAt = createdAt;
    model.name = name;
    model.versions = versions;
    model.increment = increment;
    model.incrementId = increment.id;

    expect(model.createdAt).toBe(createdAt);
    expect(model.name).toBe(name);
    expect(model.increment).toBe(increment);
    expect(model.incrementId).toBe(increment.id);
  });

  it('should convert dates to ISO strings in toJSON method', () => {
    const date = new Date();
    model.createdAt = date;

    const json = model.toJSON();

    expect(json.createdAt).toBe(date.toISOString());
  });

  it('should handle versions in toJSON() method', () => {
    const id = 'versionId';
    const createdAt = new Date();

    const version = new Version();
    version.id = id;
    version.createdAt = createdAt;
    version.toJSON = jest.fn().mockReturnValue({
      id: id,
      createdAt: createdAt.toISOString(),
      model: undefined,
      versionIndex: undefined,
      thumbnail: undefined,
      x: undefined,
      y: undefined,
      height: undefined,
      width: undefined
    });

    model.createdAt = new Date();
    model.versions = [version];

    const json = model.toJSON();

    expect(json.versions).toEqual([
      {
        id: id,
        createdAt: createdAt.toISOString(),
        model: undefined,
        versionIndex: undefined,
        thumbnail: undefined,
        x: undefined,
        y: undefined,
        height: undefined,
        width: undefined
      }
    ]);
  });

  it('should add increment correctly', () => {
    const increment = new Increment();

    increment.createdAt = new Date();
    increment.name = 'Test product';
    increment.models = [];
    increment.product = new Product();
    increment.productId = increment.product.id;
    increment.incrementIndex = 0;

    model.increment = increment;
    model.incrementId = increment.id;

    expect(model.increment).toBe(increment);
    expect(model.incrementId).toBe(increment.id);
  });

  it('should add versions correctly', () => {
    const version = new Version();

    version.createdAt = new Date();
    version.payload = 'Test payload';
    version.model = model;
    version.modelId = model.id;
    version.versionIndex = 0;
    version.thumbnail = 'Test thumbnail';
    version.x = 0.0;
    version.y = 0.0;
    version.height =  0.0;
    version.width = 0.0;

    const versions = [version];
    model.versions = versions;

    expect(model.versions.length).toBe(1);
    expect(model.versions[0]).toBe(version);
    expect(model.versions[0]).toBe(version);
  });
});
