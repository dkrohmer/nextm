import { Product } from '../../../main/models/Product';
import { Responsible } from '../../../main/models/Responsible';
import { Increment } from '../../../main/models/Increment';
import { Model } from '../../../main/models/Model';

describe('Product', () => {
  let product: Product;

  beforeEach(() => {
    product = new Product();
  });

  it('should have an id generated by uuid', () => {
    expect(product.id).toBeDefined();
    expect(product.id).toMatch(
      /^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i
    );
  });

  it('should have all other fields undefined', () => {
    expect(product.createdAt).toBeUndefined();
    expect(product.name).toBeUndefined();
    expect(product.description).toBeUndefined();
    expect(product.startsAt).toBeUndefined();
    expect(product.endsAt).toBeUndefined();
    expect(product.increments).toBeUndefined();
    expect(product.responsibles).toBeUndefined();
    expect(product.latestIncrementId).toBeUndefined();
  });

  it('should allow setting and getting values', () => {
    const createdAt = new Date();
    const name = 'Test Product';
    const description = 'Test Description';
    const startsAt = new Date();
    const endsAt = new Date();
    const latestIncrementId = 'Test IncrementId';

    const increment = new Increment();
    increment.name = 'Test Increment';
    const increments = [increment];

    const responsible = new Responsible();
    responsible.firstName = 'Test Firstname';
    responsible.lastName = 'Test Lastname';
    responsible.role = 'Test role';
    const responsibles = [responsible];

    product.createdAt = createdAt;
    product.name = name;
    product.description = description;
    product.startsAt = startsAt;
    product.endsAt = endsAt;
    product.latestIncrementId = latestIncrementId;
    product.increments = increments;
    product.responsibles = responsibles;

    expect(product.createdAt).toBe(createdAt);
    expect(product.name).toBe(name);
    expect(product.description).toBe(description);
    expect(product.startsAt).toBe(startsAt);
    expect(product.endsAt).toBe(endsAt);
    expect(product.increments).toBe(increments);
    expect(product.responsibles).toBe(responsibles);
    expect(product.latestIncrementId).toBe(latestIncrementId);
  });

  it('should convert dates to ISO strings in toJSON method', () => {
    const date = new Date();
    product.createdAt = date;
    product.startsAt = date;
    product.endsAt = date;

    const json = product.toJSON();

    expect(json.createdAt).toBe(date.toISOString());
    expect(json.startsAt).toBe(date.toISOString());
    expect(json.endsAt).toBe(date.toISOString());
  });

  it('should handle nullable dates in toJSON method', () => {
    product.createdAt = new Date();
    product.startsAt = null;
    product.endsAt = null;

    const json = product.toJSON();

    expect(json.startsAt).toBeNull();
    expect(json.endsAt).toBeNull();
  });

  it('should handle increments in toJSON() method', () => {
    const id = 'incrementId';
    const createdAt = new Date();
    const name = 'Name';

    const increment = new Increment();
    increment.id = id;
    increment.createdAt = createdAt;
    increment.name = name;
    increment.toJSON = jest.fn().mockReturnValue({
      id: id,
      createdAt: createdAt.toISOString(),
      name: name,
      models: [],
      product: undefined,
      productId: undefined,
      incrementIndex: undefined,
    });

    product.createdAt = new Date();
    product.increments = [increment];

    const json = product.toJSON();

    expect(json.increments).toEqual([
      {
        id: id,
        createdAt: createdAt.toISOString(),
        name: name,
        models: [],
        product: undefined,
        productId: undefined,
        incrementIndex: undefined,
      }
    ]);
  });

  it('should add increments correctly', () => {
    const increment = new Increment();
    const model = new Model();

    const createdAt = new Date();
    const name = 'Test Product';
    const models = [model];
    const incrementIndex = 0;

    increment.createdAt = createdAt;
    increment.name = name;
    increment.models = models;
    increment.product = product;
    increment.productId = product.id;
    increment.incrementIndex = incrementIndex;

    product.increments = [increment];

    expect(product.increments.length).toBe(1);
    expect(product.increments[0]).toBe(increment);
    expect(product.increments[0].id).toBe(increment.id);
  });

  it('should add responsibles correctly', () => {
    const responsible = new Responsible();
    responsible.firstName = 'Test firstname';
    responsible.lastName = 'Test lastname';
    responsible.role = "Test role";
    product.responsibles = [responsible];

    expect(product.responsibles.length).toBe(1);
    expect(product.responsibles[0]).toBe(responsible);
    expect(product.responsibles[0].id).toBe(responsible.id);
  });
});
