import { Product } from '../../../main/models/Product';
import { Increment } from '../../../main/models/Increment';
import { Model } from '../../../main/models/Model';

describe('Increment', () => {
  let increment: Increment;

  beforeEach(() => {
    increment = new Increment();
  });

  it('should have an id generated by uuid', () => {
    expect(increment.id).toBeDefined();
    expect(increment.id).toMatch(
      /^[0-9a-f]{8}-[0-9a-f]{4}-[4][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,
    );
  });

  it('should have all other fields undefined', () => {
    expect(increment.createdAt).toBeUndefined();
    expect(increment.name).toBeUndefined();
    expect(increment.models).toBeUndefined();
    expect(increment.product).toBeUndefined();
    expect(increment.productId).toBeUndefined();
    expect(increment.incrementIndex).toBeUndefined();
  });

  it('should allow setting and getting values', () => {
    const createdAt = new Date();
    const name = 'Test Product';
    const productId = 'Test ProductId';
    const incrementIndex = 0;

    const model = new Model();
    model.name = 'Test Model';
    const models = [model];

    const product = new Product();
    product.name = 'Test Product';

    increment.createdAt = createdAt;
    increment.name = name;
    increment.models = models;
    increment.product = product;
    increment.productId = productId;
    increment.incrementIndex = incrementIndex;

    expect(increment.createdAt).toBe(createdAt);
    expect(increment.name).toBe(name);
    expect(increment.models).toBe(models);
    expect(increment.product).toBe(product);
    expect(increment.productId).toBe(productId);
    expect(increment.incrementIndex).toBe(incrementIndex);
  });

  it('should convert dates to ISO strings in toJSON method', () => {
    const date = new Date();
    increment.createdAt = date;

    const json = increment.toJSON();

    expect(json.createdAt).toBe(date.toISOString());
  });

  it('should handle models in toJSON() method', () => {
    const id = 'modelId';
    const createdAt = new Date();
    const name = 'Name';

    const model = new Model();
    model.id = id;
    model.createdAt = createdAt;
    model.name = name;

    model.toJSON = jest.fn().mockReturnValue({
      id,
      createdAt: createdAt.toISOString(),
      name,
      versions: [],
      increment: undefined,
      incrementId: undefined,
    });

    increment.createdAt = new Date();
    increment.models = [model];

    const json = increment.toJSON();

    expect(json.models).toEqual([
      {
        id,
        createdAt: createdAt.toISOString(),
        name,
        versions: [],
        increment: undefined,
        incrementId: undefined,
      },
    ]);
  });

  it('should add products correctly', () => {
    const product = new Product();

    product.createdAt = new Date();
    product.name = 'Test product';
    product.description = 'Test description';
    product.startsAt = new Date();
    product.endsAt = new Date();
    product.responsibles = [];
    product.increments = [];
    product.latestIncrementId = 'Test latestIncrementId';

    increment.product = product;
    increment.productId = product.id;

    expect(increment.product).toBe(product);
    expect(increment.productId).toBe(product.id);
  });

  it('should add models correctly', () => {
    const model = new Model();

    model.createdAt = new Date();
    model.name = 'Test model';
    model.versions = [];
    model.increment = increment;
    model.incrementId = increment.id;

    increment.models = [model];

    expect(increment.models.length).toBe(1);
    expect(increment.models[0]).toBe(model);
    expect(increment.models[0].id).toBe(model.id);
  });
});
